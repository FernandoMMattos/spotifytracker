{"version":3,"file":"spotify-now-playing.esm.js","sources":["../src/utils/result.ts","../src/service/spotify.ts"],"sourcesContent":["import { Mapper } from './mapper'\r\nimport { SongResult } from './type'\r\n\r\nexport class SongResultMap implements Mapper<SongResult> {\r\n    public static parseSong(result: any): SongResult {\r\n        const { item } = result\r\n\r\n        return {\r\n            progress: result.progress_ms,\r\n            title: item.name,\r\n            album: {\r\n                name: item.album.name,\r\n                image: item.album.images[0].url,\r\n                release: item.album.release_date,\r\n            },\r\n            artists: {\r\n                name: item.artists.map((x: any) => x.name),\r\n                url: item.artists.map((x: any) => x.external_urls.spotify)\r\n            },\r\n            url: item.external_urls.spotify,\r\n            length: item.duration_ms,\r\n            isPlaying: result.is_playing\r\n        }\r\n      }\r\n}","import { SongResult } from '../utils/type'\r\nimport { SongResultMap } from '../utils/result'\r\n\r\nimport axios from 'axios'\r\n\r\nexport class SpotifyService {\r\n    private accessToken: string = ''\r\n    \r\n    private clientId: string\r\n    private clientSecret: string\r\n    private refreshToken: string\r\n\r\n    constructor(clientId: string, clientSecret: string, refreshToken: string) {\r\n        this.clientId = clientId\r\n        this.clientSecret = clientSecret\r\n        this.refreshToken = refreshToken\r\n    }\r\n\r\n    private hasAccessToken(): boolean {\r\n        return this.accessToken !== ''\r\n    }\r\n\r\n    private setAccessToken(token: string): void {\r\n        this.accessToken = token\r\n    }\r\n\r\n    private async getAccessToken(): Promise<void> {\r\n        try {\r\n            const response = await axios({ url: 'https://accounts.spotify.com/api/token', \r\n                method: 'POST', \r\n                params: {\r\n                    client_id: this.clientId,\r\n                    client_secret: this.clientSecret,\r\n                    refresh_token: this.refreshToken,\r\n                    grant_type: 'refresh_token',\r\n                }\r\n            }).then((res) => res.data)\r\n\r\n            this.setAccessToken(response.access_token)\r\n        } catch {\r\n            throw new Error('Invalid credentials were given')\r\n        }\r\n    } \r\n\r\n    public async getCurrentSong(): Promise<SongResult>  {\r\n        try {\r\n            if(!this.hasAccessToken()) {\r\n                await this.getAccessToken()\r\n            }\r\n\r\n            const response = await axios({ url: 'https://api.spotify.com/v1/me/player/currently-playing', \r\n                method: 'GET', \r\n                headers: {\r\n                    'Authorization': 'Bearer ' + this.accessToken\r\n                }\r\n            }).then((res) => res.data)\r\n            \r\n            return SongResultMap.parseSong(response)\r\n        } catch {\r\n            return await this.getAccessToken() as any\r\n        }\r\n    }\r\n}"],"names":["SongResultMap","parseSong","result","item","progress","progress_ms","title","name","album","image","images","url","release","release_date","artists","map","x","external_urls","spotify","length","duration_ms","isPlaying","is_playing","SpotifyService","clientId","clientSecret","refreshToken","hasAccessToken","accessToken","setAccessToken","token","getAccessToken","axios","method","params","client_id","client_secret","refresh_token","grant_type","then","res","data","response","access_token","Error","getCurrentSong","headers"],"mappings":"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"}