{"version":3,"file":"spotify-now-playing.cjs.production.min.js","sources":["../src/utils/result.ts","../src/service/spotify.ts"],"sourcesContent":["import { Mapper } from './mapper'\r\nimport { SongResult } from './type'\r\n\r\nexport class SongResultMap implements Mapper<SongResult> {\r\n    public static parseSong(result: any): SongResult {\r\n        const { item } = result\r\n\r\n        return {\r\n            progress: result.progress_ms,\r\n            title: item.name,\r\n            album: {\r\n                name: item.album.name,\r\n                image: item.album.images[0].url,\r\n                release: item.album.release_date,\r\n            },\r\n            artists: {\r\n                name: item.artists.map((x: any) => x.name),\r\n                url: item.artists.map((x: any) => x.external_urls.spotify)\r\n            },\r\n            url: item.external_urls.spotify,\r\n            length: item.duration_ms,\r\n            isPlaying: result.is_playing\r\n        }\r\n      }\r\n}","import { SongResult } from '../utils/type'\r\nimport { SongResultMap } from '../utils/result'\r\n\r\nimport axios from 'axios'\r\n\r\nexport class SpotifyService {\r\n    private accessToken: string = ''\r\n    \r\n    private clientId: string\r\n    private clientSecret: string\r\n    private refreshToken: string\r\n\r\n    constructor(clientId: string, clientSecret: string, refreshToken: string) {\r\n        this.clientId = clientId\r\n        this.clientSecret = clientSecret\r\n        this.refreshToken = refreshToken\r\n    }\r\n\r\n    private hasAccessToken(): boolean {\r\n        return this.accessToken !== ''\r\n    }\r\n\r\n    private setAccessToken(token: string): void {\r\n        this.accessToken = token\r\n    }\r\n\r\n    private async getAccessToken(): Promise<void> {\r\n        try {\r\n            const response = await axios({ url: 'https://accounts.spotify.com/api/token', \r\n                method: 'POST', \r\n                params: {\r\n                    client_id: this.clientId,\r\n                    client_secret: this.clientSecret,\r\n                    refresh_token: this.refreshToken,\r\n                    grant_type: 'refresh_token',\r\n                }\r\n            }).then((res) => res.data)\r\n\r\n            this.setAccessToken(response.access_token)\r\n        } catch {\r\n            throw new Error('Invalid credentials were given')\r\n        }\r\n    } \r\n\r\n    public async getCurrentSong(): Promise<SongResult>  {\r\n        try {\r\n            if(!this.hasAccessToken()) {\r\n                await this.getAccessToken()\r\n            }\r\n\r\n            const response = await axios({ url: 'https://api.spotify.com/v1/me/player/currently-playing', \r\n                method: 'GET', \r\n                headers: {\r\n                    'Authorization': 'Bearer ' + this.accessToken\r\n                }\r\n            }).then((res) => res.data)\r\n            \r\n            return SongResultMap.parseSong(response)\r\n        } catch {\r\n            return await this.getAccessToken() as any\r\n        }\r\n    }\r\n}"],"names":["SongResultMap","parseSong","result","item","progress","progress_ms","title","name","album","image","images","url","release","release_date","artists","map","x","external_urls","spotify","length","duration_ms","isPlaying","is_playing","clientId","clientSecret","refreshToken","this","_proto","hasAccessToken","accessToken","setAccessToken","token","getAccessToken","_context","axios","method","params","client_id","client_secret","refresh_token","grant_type","then","res","data","access_token","Error","getCurrentSong","_context2","headers","Authorization"],"mappings":"ywNAGaA,aAAa,cAoBnB,OApBmBA,EACRC,UAAP,SAAiBC,GACpB,IAAQC,EAASD,EAATC,KAER,MAAO,CACHC,SAAUF,EAAOG,YACjBC,MAAOH,EAAKI,KACZC,MAAO,CACHD,KAAMJ,EAAKK,MAAMD,KACjBE,MAAON,EAAKK,MAAME,OAAO,GAAGC,IAC5BC,QAAST,EAAKK,MAAMK,cAExBC,QAAS,CACLP,KAAMJ,EAAKW,QAAQC,KAAI,SAACC,GAAM,OAAKA,EAAET,QACrCI,IAAKR,EAAKW,QAAQC,KAAI,SAACC,GAAM,OAAKA,EAAEC,cAAcC,YAEtDP,IAAKR,EAAKc,cAAcC,QACxBC,OAAQhB,EAAKiB,YACbC,UAAWnB,EAAOoB,oDCT1B,WAAYC,EAAkBC,EAAsBC,GAN5CC,iBAAsB,GAO1BA,KAAKH,SAAWA,EAChBG,KAAKF,aAAeA,EACpBE,KAAKD,aAAeA,EACvB,kBA6CA,OA7CAE,EAEOC,eAAA,WACJ,MAA4B,KAArBF,KAAKG,aACfF,EAEOG,eAAA,SAAeC,GACnBL,KAAKG,YAAcE,GACtBJ,EAEaK,0BAAc,kBAApB,aAAA,6BAAA,OAAA,sBAAA,OAAA,OAAAC,SAAAA,SAEuBC,EAAM,CAAEvB,IAAK,yCAChCwB,OAAQ,OACRC,OAAQ,CACJC,UAAWX,KAAKH,SAChBe,cAAeZ,KAAKF,aACpBe,cAAeb,KAAKD,aACpBe,WAAY,mBAEjBC,MAAK,SAACC,GAAG,OAAKA,EAAIC,QAAK,OAE1BjB,KAAKI,sBAAwBc,cAAaX,UAAA,MAAA,OAAA,MAAAA,SAAAA,gBAEpC,IAAIY,MAAM,kCAAiC,QAAA,UAAA,uCAExD,OAAA,WAAA,mCAAAlB,EAEYmB,0BAAc,kBAApB,aAAA,6BAAA,OAAA,sBAAA,OAAA,GAAAC,SAEKrB,KAAKE,kBAAgBmB,SAAA,MAAA,OAAAA,SACfrB,KAAKM,iBAAgB,OAAA,OAAAe,SAGRb,EAAM,CAAEvB,IAAK,yDAChCwB,OAAQ,MACRa,QAAS,CACLC,cAAiB,UAAYvB,KAAKG,eAEvCY,MAAK,SAACC,GAAG,OAAKA,EAAIC,QAAK,OALZ,yBAOP3C,EAAcC,mBAAmB,QAAA,OAAA8C,UAAAA,gBAAAA,UAE3BrB,KAAKM,iBAAuB,QAAA,iCAAA,QAAA,UAAA,wCAEhD,OAAA,WAAA"}